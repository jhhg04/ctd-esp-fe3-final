import type { NextPage } from "next";
import Head from "next/head";
import BodySingle from "dh-marvel/components/layouts/body/single/body-single";
import { GridTemplate } from "dh-marvel/components/gridTemplate/gridTemplate";
import { Comic } from "dh-marvel/features/types";
import { getComics } from "dh-marvel/services/marvel/marvel.service";
import { ButtonPaginationTemplate } from "dh-marvel/components/buttonTemplate/buttonPaginationTemplate";
import { useState } from "react";
import React from "react";
import { Box, CircularProgress } from "@mui/material";
import LayoutGeneral from "dh-marvel/components/layouts/layout-general";

type props = {
  comics: Comic[];
  pages: number;
};
export async function getStaticProps() {
  const res = await getComics(0, 12);
  return {
    props: {
      comics: res.data.results,
      pages: res.data.total,
    },
  };
}

const Index: NextPage<props> = ({ comics, pages }) => {
  // logic to set the page for pagination
  const [page, setPage] = React.useState(1);
  const [comicData, setComicData] = useState(comics);
  const [isLoading, setIsLoading] = useState(false);
  /**
   * handleChange function recieves an event and updates the state -page- and calls the function handleNextPage.
   * This function is called when the user clicks on a button of the pagination
   * @param event
   * @param value
   * @author jhhg04
   */
  const handleChange = (event: React.ChangeEvent<unknown>, value: number) => {
    setPage(value);
    handleNextPage(value * 12 - 12);
  };
  /**
   * handleNextPage function is a handler to set the page for the pagination making a call to the corresponding api
   * @param offset dinamic param to set the pagination data
   * @author jhhg04
   */
  const handleNextPage = async (offset: number) => {
    setIsLoading(true);
    const params = new URLSearchParams();
    params.set("offset", `${offset}`);
    params.set("limit", `${12}`);
    await fetch("/api/comicPagination?" + params.toString())
      .then((res) => res.json())
      .then((data) => {
        setComicData(data.comics.results);
        return data;
      })
      .finally(() => {
        setIsLoading(false);
      });
    // const response = await fetch("/api/comicPagination?" + params.toString())
    // const data = await response.json();
  };

  return (
    <>
      <Head>
        <title>Comic Shop</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <LayoutGeneral>
        <BodySingle title={"All comics"}>
          <ButtonPaginationTemplate
            count={Math.ceil(pages / 12)}
            page={page}
            onChange={handleChange}
          />
          {isLoading ? (
            <Box sx={{ textAlign: "center" }}>
              <CircularProgress />
            </Box>
          ) : (
            <GridTemplate comics={comicData} />
          )}

          <ButtonPaginationTemplate
            page={page}
            onChange={handleChange}
            count={Math.ceil(pages / 12)}
          />
        </BodySingle>
      </LayoutGeneral>
    </>
  );
};

export default Index;
